
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import java_cup.runtime.ComplexSymbolFactory.ComplexSymbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Tokens.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\055\000\002\002\005\000\002\002\004\000\002\002" +
    "\004\000\002\002\003\000\002\004\003\000\002\004\003" +
    "\000\002\007\010\000\002\010\002\000\002\010\004\000" +
    "\002\011\005\000\002\013\002\000\002\013\004\000\002" +
    "\015\012\000\002\024\002\000\002\024\006\000\002\024" +
    "\004\000\002\025\002\000\002\025\004\000\002\026\003" +
    "\000\002\026\003\000\002\026\004\000\002\026\004\000" +
    "\002\026\004\000\002\026\005\000\002\031\003\000\002" +
    "\030\015\000\002\003\003\000\002\003\003\000\002\005" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\004" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\004\000\002\006\003\000\002\006\003\000\002\006\005" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\022\006\005\011\017\013\015\032\006\033" +
    "\014\034\016\037\020\041\013\001\002\000\022\004\ufffd" +
    "\005\076\006\103\007\102\012\ufffd\022\077\023\100\024" +
    "\101\001\002\000\012\006\005\011\104\013\015\041\013" +
    "\001\002\000\014\004\uffd7\012\uffd7\020\uffd7\035\uffd7\036" +
    "\uffd7\001\002\000\004\004\135\001\002\000\022\002\133" +
    "\006\005\011\017\013\015\032\006\033\014\034\016\041" +
    "\013\001\002\000\012\004\ufffc\012\ufffc\035\072\036\073" +
    "\001\002\000\022\002\ufffe\006\ufffe\011\ufffe\013\ufffe\032" +
    "\ufffe\033\ufffe\034\ufffe\041\ufffe\001\002\000\030\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\012\uffe0\020\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\035\uffe0\036\uffe0\001\002\000\014\004\uffd6" +
    "\012\uffd6\020\uffd6\035\uffd6\036\uffd6\001\002\000\032\004" +
    "\uffdf\005\uffdf\006\uffdf\007\uffdf\012\uffdf\014\130\020\uffdf" +
    "\022\uffdf\023\uffdf\024\uffdf\035\uffdf\036\uffdf\001\002\000" +
    "\020\006\005\011\017\013\015\032\006\033\014\034\016" +
    "\041\013\001\002\000\020\006\005\011\017\013\015\032" +
    "\006\033\014\034\016\041\013\001\002\000\004\013\021" +
    "\001\002\000\004\015\022\001\002\000\012\016\ufffa\025" +
    "\ufffa\026\ufffa\040\ufffa\001\002\000\012\016\ufff7\025\027" +
    "\026\ufff7\040\030\001\002\000\004\013\122\001\002\000" +
    "\006\016\032\026\033\001\002\000\012\016\ufff9\025\ufff9" +
    "\026\ufff9\040\ufff9\001\002\000\004\013\uffe6\001\002\000" +
    "\004\013\uffe7\001\002\000\006\016\ufff6\026\ufff6\001\002" +
    "\000\022\002\ufffb\006\ufffb\011\ufffb\013\ufffb\032\ufffb\033" +
    "\ufffb\034\ufffb\041\ufffb\001\002\000\004\013\034\001\002" +
    "\000\004\011\035\001\002\000\012\012\ufff4\017\ufff4\025" +
    "\027\040\030\001\002\000\004\013\121\001\002\000\006" +
    "\012\041\017\040\001\002\000\006\025\027\040\030\001" +
    "\002\000\004\015\042\001\002\000\026\006\ufff1\011\ufff1" +
    "\013\ufff1\016\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\034" +
    "\ufff1\041\ufff1\001\002\000\026\006\005\011\017\013\015" +
    "\016\053\027\051\031\052\032\006\033\014\034\016\041" +
    "\013\001\002\000\020\005\076\006\103\007\102\020\116" +
    "\022\077\023\100\024\101\001\002\000\026\006\uffee\011" +
    "\uffee\013\uffee\016\uffee\027\uffee\031\uffee\032\uffee\033\uffee" +
    "\034\uffee\041\uffee\001\002\000\026\006\ufff0\011\ufff0\013" +
    "\ufff0\016\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0" +
    "\041\ufff0\001\002\000\010\020\071\035\072\036\073\001" +
    "\002\000\026\006\uffef\011\uffef\013\uffef\016\uffef\027\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\041\uffef\001\002\000" +
    "\004\011\057\001\002\000\022\004\055\006\005\011\017" +
    "\013\015\032\006\033\014\034\016\041\013\001\002\000" +
    "\006\016\ufff5\026\ufff5\001\002\000\004\004\056\001\002" +
    "\000\026\006\uffeb\011\uffeb\013\uffeb\016\uffeb\027\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\041\uffeb\001\002\000\026" +
    "\006\uffea\011\uffea\013\uffea\016\uffea\027\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\041\uffea\001\002\000\020\006\005" +
    "\011\017\013\015\032\006\033\014\034\016\041\013\001" +
    "\002\000\004\012\061\001\002\000\004\015\062\001\002" +
    "\000\026\006\ufff1\011\ufff1\013\ufff1\016\ufff1\027\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\041\ufff1\001\002\000\026" +
    "\006\005\011\017\013\015\016\064\027\051\031\052\032" +
    "\006\033\014\034\016\041\013\001\002\000\004\030\065" +
    "\001\002\000\004\015\066\001\002\000\026\006\ufff1\011" +
    "\ufff1\013\ufff1\016\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\041\ufff1\001\002\000\026\006\005\011\017\013" +
    "\015\016\070\027\051\031\052\032\006\033\014\034\016" +
    "\041\013\001\002\000\026\006\uffe8\011\uffe8\013\uffe8\016" +
    "\uffe8\027\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\041\uffe8" +
    "\001\002\000\026\006\uffec\011\uffec\013\uffec\016\uffec\027" +
    "\uffec\031\uffec\032\uffec\033\uffec\034\uffec\041\uffec\001\002" +
    "\000\020\006\005\011\017\013\015\032\006\033\014\034" +
    "\016\041\013\001\002\000\020\006\005\011\017\013\015" +
    "\032\006\033\014\034\016\041\013\001\002\000\016\005" +
    "\076\006\103\007\102\022\077\023\100\024\101\001\002" +
    "\000\014\004\uffd9\012\uffd9\020\uffd9\035\072\036\uffd9\001" +
    "\002\000\012\006\005\011\104\013\015\041\013\001\002" +
    "\000\012\006\005\011\104\013\015\041\013\001\002\000" +
    "\012\006\005\011\104\013\015\041\013\001\002\000\012" +
    "\006\005\011\104\013\015\041\013\001\002\000\012\006" +
    "\005\011\104\013\015\041\013\001\002\000\012\006\005" +
    "\011\104\013\015\041\013\001\002\000\012\006\005\011" +
    "\104\013\015\041\013\001\002\000\030\004\uffe4\005\uffe4" +
    "\006\uffe4\007\102\012\uffe4\020\uffe4\022\uffe4\023\uffe4\024" +
    "\uffe4\035\uffe4\036\uffe4\001\002\000\012\005\076\006\103" +
    "\007\102\012\107\001\002\000\030\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\012\uffe1\020\uffe1\022\uffe1\023\uffe1\024\uffe1" +
    "\035\uffe1\036\uffe1\001\002\000\030\004\uffe3\005\uffe3\006" +
    "\uffe3\007\uffe3\012\uffe3\020\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\035\uffe3\036\uffe3\001\002\000\022\004\uffdb\005\076\006" +
    "\103\007\102\012\uffdb\020\uffdb\035\uffdb\036\uffdb\001\002" +
    "\000\022\004\uffdc\005\076\006\103\007\102\012\uffdc\020" +
    "\uffdc\035\uffdc\036\uffdc\001\002\000\022\004\uffdd\005\076" +
    "\006\103\007\102\012\uffdd\020\uffdd\035\uffdd\036\uffdd\001" +
    "\002\000\030\004\uffe5\005\uffe5\006\uffe5\007\102\012\uffe5" +
    "\020\uffe5\022\uffe5\023\uffe5\024\uffe5\035\uffe5\036\uffe5\001" +
    "\002\000\014\004\uffda\012\uffda\020\uffda\035\uffda\036\uffda" +
    "\001\002\000\026\006\uffed\011\uffed\013\uffed\016\uffed\027" +
    "\uffed\031\uffed\032\uffed\033\uffed\034\uffed\041\uffed\001\002" +
    "\000\004\013\120\001\002\000\006\012\ufff3\017\ufff3\001" +
    "\002\000\006\012\ufff2\017\ufff2\001\002\000\004\020\123" +
    "\001\002\000\012\016\ufff8\025\ufff8\026\ufff8\040\ufff8\001" +
    "\002\000\020\005\076\006\103\007\102\012\107\022\077" +
    "\023\100\024\101\001\002\000\010\012\126\035\072\036" +
    "\073\001\002\000\014\004\uffd5\012\uffd5\020\uffd5\035\uffd5" +
    "\036\uffd5\001\002\000\014\004\uffd8\012\uffd8\020\uffd8\035" +
    "\uffd8\036\uffd8\001\002\000\012\006\005\011\104\013\015" +
    "\041\013\001\002\000\030\004\uffde\005\076\006\103\007" +
    "\102\012\uffde\020\uffde\022\uffde\023\uffde\024\uffde\035\uffde" +
    "\036\uffde\001\002\000\004\004\134\001\002\000\004\002" +
    "\000\001\002\000\022\002\001\006\001\011\001\013\001" +
    "\032\001\033\001\034\001\041\001\001\002\000\022\002" +
    "\uffff\006\uffff\011\uffff\013\uffff\032\uffff\033\uffff\034\uffff" +
    "\041\uffff\001\002\000\030\004\uffe2\005\uffe2\006\uffe2\007" +
    "\102\012\uffe2\020\uffe2\022\uffe2\023\uffe2\024\uffe2\035\uffe2" +
    "\036\uffe2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\134\000\014\002\007\004\006\005\003\006\010\007" +
    "\011\001\001\000\002\001\001\000\004\005\135\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\131\005" +
    "\003\006\010\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\005\073\006\126\001\001\000\006\005\123\006\124" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\022\001\001\000\010\003\023\011\025\013\024\001\001" +
    "\000\002\001\001\000\004\015\030\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\003\035\024\036\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\003\116\001\001\000\002\001\001\000" +
    "\004\025\042\001\001\000\014\005\043\006\046\026\045" +
    "\027\047\030\044\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\053\005\003\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\004\057\005\003\006\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\025\062" +
    "\001\001\000\014\005\043\006\046\026\045\027\047\030" +
    "\044\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\066\001\001\000\014\005\043\006\046\026\045\027" +
    "\047\030\044\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\073\006\114\001\001\000\006\005\073\006" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\113\001\001\000\004\005\112\001\001\000\004\005" +
    "\111\001\001\000\004\005\110\001\001\000\004\005\107" +
    "\001\001\000\004\005\104\001\001\000\004\005\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\130\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
  
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return s.next_token(); 
    }



    // conecta esse parser ao scanner
    Scanner s;
    Parser(Scanner s){ this.s=s; }

    // Tabela de símbolos que aceita diferentes tipos
    java.util.Map<String, Object> simbolos = new java.util.HashMap<String, Object>();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // inicio ::= inicio exp SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= inicio EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // inicio ::= exp SEMI 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 System.out.println(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // inicio ::= classe_decl 
            {
              Object RESULT =null;
		 System.out.println("Classe declarada."); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("inicio",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // exp ::= exp_arit 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // exp ::= exp_bool 
            {
              Integer RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean b = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b ? 1 : 0; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // classe_decl ::= CLASS ID LBRACE var_decl_list method_decl_list RBRACE 
            {
              Object RESULT =null;
		int idTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int idTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object idToken = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		 
                   String className = (String) ((Symbol) idToken).value;
                   System.out.println("Classe " + className + " declarada.");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("classe_decl",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // var_decl_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // var_decl_list ::= var_decl_list var_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl_list",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // var_decl ::= tipo ID SEMICOLON 
            {
              Object RESULT =null;
		int idTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int idTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object idToken = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                String varName = (String) ((Symbol) idToken).value;
                System.out.println("Variável " + varName + " declarada.");
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("var_decl",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // method_decl_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // method_decl_list ::= method_decl_list method_decl 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl_list",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // method_decl ::= VOID ID LPAREN param_decl_list RPAREN LBRACE stmt_list RBRACE 
            {
              Object RESULT =null;
		int idTokenleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int idTokenright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object idToken = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 
                   String methodName = (String) ((Symbol) idToken).value;
                   System.out.println("Método " + methodName + " declarado.");
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("method_decl",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // param_decl_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_decl_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // param_decl_list ::= param_decl_list COMMA tipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_decl_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // param_decl_list ::= tipo ID 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("param_decl_list",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt_list ::= 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt_list ::= stmt_list stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt_list",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= atrib_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= if_stmt 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // stmt ::= exp_arit SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // stmt ::= exp_bool SEMICOLON 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // stmt ::= RETURN SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // stmt ::= RETURN exp SEMI 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("stmt",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp_stmt ::= exp 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                    System.out.println("Expressão: " + e); 
                  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_stmt",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // if_stmt ::= IF LPAREN exp RPAREN LBRACE stmt_list RBRACE ELSE LBRACE stmt_list RBRACE 
            {
              Object RESULT =null;
		 
              System.out.println("Estrutura if-else avaliada.");
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stmt",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipo ::= INT 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("tipo",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp_arit ::= exp_arit MAIS exp_arit 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   Integer i1 = (Integer) e1;
                   Integer i2 = (Integer) e2;
                   RESULT = i1 + i2;                
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp_arit ::= exp_arit MENOS exp_arit 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   Integer i1 = (Integer) e1;
                   Integer i2 = (Integer) e2;
                   RESULT = i1 - i2;                
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp_arit ::= exp_arit VEZES exp_arit 
            {
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   Integer i1 = (Integer) e1;
                   Integer i2 = (Integer) e2;
                   RESULT = i1 * i2;                
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp_arit ::= MENOS exp_arit 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = -((Integer) e);                   
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp_arit ::= LPAREN exp_arit RPAREN 
            {
              Integer RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                   RESULT = e;                    
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_arit ::= NUMERO 
            {
              Integer RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   RESULT = n;                    
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_arit ::= ID 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   Object value = simbolos.get(i);
                   if (value instanceof Integer) {
                       RESULT = (Integer) value;
                   } else {
                       throw new RuntimeException("Variable " + i + " is not an integer.");
                   }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_arit ::= ID ATRIB exp_arit 
            {
              Integer RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                   if (e instanceof Integer) {
                       simbolos.put(i.toString(), (Integer) e);  
                       RESULT = e;  // Retorna o valor atribuído
                   } else {
                       throw new RuntimeException("Expected an Integer for assignment");
                   }
               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_arit",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_bool ::= exp_arit EQ exp_arit 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = (e1.equals(e2)); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_bool ::= exp_arit LT exp_arit 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = (e1 < e2); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_bool ::= exp_arit GT exp_arit 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = (e1 > e2); 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_bool ::= exp_bool AND exp_bool 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = e1 && e2; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // exp_bool ::= exp_bool OR exp_bool 
            {
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = e1 || e2; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp_bool ::= NOT exp_bool 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 
                RESULT = !e; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp_bool ::= TRUE 
            {
              Boolean RESULT =null;
		 
                RESULT = true; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp_bool ::= FALSE 
            {
              Boolean RESULT =null;
		 
                RESULT = false; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp_bool ::= LPAREN exp_bool RPAREN 
            {
              Boolean RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Boolean e = (Boolean)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 
                RESULT = e; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("exp_bool",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
